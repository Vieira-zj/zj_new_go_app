// Code generated by MockGen. DO NOT EDIT.
// Source: ./bar.go

// Package mocktest is a generated GoMock package.
package mocktest

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBar is a mock of Bar interface.
type MockBar struct {
	ctrl     *gomock.Controller
	recorder *MockBarMockRecorder
}

// MockBarMockRecorder is the mock recorder for MockBar.
type MockBarMockRecorder struct {
	mock *MockBar
}

// NewMockBar creates a new mock instance.
func NewMockBar(ctrl *gomock.Controller) *MockBar {
	mock := &MockBar{ctrl: ctrl}
	mock.recorder = &MockBarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBar) EXPECT() *MockBarMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBar) Get(key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockBarMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBar)(nil).Get), key)
}

// Put mocks base method.
func (m *MockBar) Put(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", key, value)
}

// Put indicates an expected call of Put.
func (mr *MockBarMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBar)(nil).Put), key, value)
}
