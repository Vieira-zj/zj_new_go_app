package codegen

import (
	"fmt"
	"go/types"
	"strings"
	"testing"

	"github.com/dave/jennifer/jen"
	"github.com/stretchr/testify/assert"
)

func TestCodeGenHello(t *testing.T) {
	f := jen.NewFile("main")

	f.PackageComment("Code generated by generator, DO NOT EDIT.")

	f.Func().Id("main").Params().Block(
		jen.Qual("fmt", "Println").Call(jen.Lit("Hello, world")),
	)

	fmt.Printf("%#v", f)
}

func TestCodeGenForProductMapping(t *testing.T) {
	structType := getProductStruct(t)

	// go imports are automatically added when used with a File.
	f := jen.NewFile("codegen")
	f.PackageComment("Code generated by generator, DO NOT EDIT.")

	t.Cleanup(func() {
		fpath := "/tmp/test/product_mapping_gen.go"
		err := f.Save(fpath)
		assert.NoError(t, err)
		t.Log("code gen success, save at", fpath)
	})

	t.Run("gen ProductChangeSet{}", func(t *testing.T) {
		changeSetFields := make([]jen.Code, 0, structType.NumFields())
		for i := 0; i < structType.NumFields(); i++ {
			field := structType.Field(i)
			code := jen.Id(field.Name())
			switch v := field.Type().(type) {
			case *types.Basic:
				code.Op("*").Id(v.String())
			case *types.Named:
				typeName := v.Obj()
				code.Op("*").Qual(typeName.Pkg().Path(), typeName.Name())
			default:
				t.Fatalf("struct field type not hanled: %T", v)
			}

			changeSetFields = append(changeSetFields, code)
		}

		f.Type().Id("ProductChangeSet").Struct(changeSetFields...)
	})

	t.Run("gen ProductChangeSet.toMap()", func(t *testing.T) {
		toMapBlocks := make([]jen.Code, 0, structType.NumFields())

		// build "m := make(map[string]interface{})"
		initMap := jen.Id("m").Op(":=").Make(jen.Map(jen.String()).Interface())
		toMapBlocks = append(toMapBlocks, initMap)

		for i := 0; i < structType.NumFields(); i++ {
			field := structType.Field(i)
			tag := structType.Tag(i)

			if !strings.HasPrefix(tag, "col:") {
				continue
			}
			col := tag[len("col:")+1 : len(tag)-1]

			// Build "if c.Field != nil { m["col"] = *c.Field }"
			code := jen.If(jen.Id("c").Dot(field.Name()).Op("!=").Nil()).Block(
				jen.Id("m").Index(jen.Lit(col)).Op("=").Op("*").Id("c").Dot(field.Name()),
			)
			toMapBlocks = append(toMapBlocks, code)
		}

		toMapBlocks = append(toMapBlocks, jen.Return(jen.Id("m")))

		f.Func().Params(
			jen.Id("c").Id("ProductChangeSet"),
		).Id("toMap").Params().Map(jen.String()).Interface().Block(
			toMapBlocks...,
		)
	})
}
