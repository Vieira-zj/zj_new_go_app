//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package sdk

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"github.com/go-redis/redis"
	timex "time"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &redis_{}
		},
	})
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Redis{}
		},
		ParamFactory: func() interface{} {
			var _ paramInterface = &Param{}
			return &Param{}
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(paramInterface)
			impl := i.(*Redis)
			return param.New(impl)
		},
	})
	singleton.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Redis{}
		},
		ParamFactory: func() interface{} {
			var _ paramInterface = &Param{}
			return &Param{}
		},
		ConstructFunc: func(i interface{}, p interface{}) (interface{}, error) {
			param := p.(paramInterface)
			impl := i.(*Redis)
			return param.New(impl)
		},
	})
}

type paramInterface interface {
	New(impl *Redis) (*Redis, error)
}
type redis_ struct {
	Get_ func(key string) *redis.StringCmd
	Set_ func(key string, value interface{}, expiration timex.Duration) *redis.StatusCmd
}

func (r *redis_) Get(key string) *redis.StringCmd {
	return r.Get_(key)
}

func (r *redis_) Set(key string, value interface{}, expiration timex.Duration) *redis.StatusCmd {
	return r.Set_(key, value, expiration)
}

type RedisIOCInterface interface {
	Get(key string) *redis.StringCmd
	Set(key string, value interface{}, expiration timex.Duration) *redis.StatusCmd
}

func GetRedis(p *Param) (*Redis, error) {
	i, err := normal.GetImpl(util.GetSDIDByStructPtr(new(Redis)), p)
	if err != nil {
		return nil, err
	}
	impl := i.(*Redis)
	return impl, nil
}

func GetRedisIOCInterface(p *Param) (RedisIOCInterface, error) {
	i, err := normal.GetImplWithProxy(util.GetSDIDByStructPtr(new(Redis)), p)
	if err != nil {
		return nil, err
	}
	impl := i.(RedisIOCInterface)
	return impl, nil
}

func GetRedisSingleton(p *Param) (*Redis, error) {
	i, err := singleton.GetImpl(util.GetSDIDByStructPtr(new(Redis)), p)
	if err != nil {
		return nil, err
	}
	impl := i.(*Redis)
	return impl, nil
}

func GetRedisIOCInterfaceSingleton(p *Param) (RedisIOCInterface, error) {
	i, err := singleton.GetImplWithProxy(util.GetSDIDByStructPtr(new(Redis)), p)
	if err != nil {
		return nil, err
	}
	impl := i.(RedisIOCInterface)
	return impl, nil
}
